type ResolveOptions<T extends Record<string, any>> = Pick<T, 'currency' | 'currencyDisplay' | 'unit' | 'unitDisplay' | 'signDisplay' | 'minimumIntegerDigits' | 'minimumFractionDigits' | 'maximumFractionDigits'>;
export interface IncludedOptions {
    format: Intl.NumberFormatOptions['style'];
    groupDisplay: Intl.NumberFormatOptions['useGrouping'];
    maximumIntegerDigits: number | undefined;
}
export type NumberFormatOptions = ResolveOptions<Intl.NumberFormatOptions> & Partial<IncludedOptions>;
export type ResolvedNumberFormatOptions = ResolveOptions<Intl.ResolvedNumberFormatOptions> & IncludedOptions;
export interface LocalizedNumberFormatValues {
    signBackwards: boolean;
    minusSign: string;
    decimal: string;
    digits: string;
}
export {};
